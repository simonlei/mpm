# The webRoot directory:
# the directory that the servlet engine regards as the place where applications 
# that use the servlet engine should be installed.  Generally, it is safe to leave
# this at the default setting of __AUTODETECT__.  When the SmartClient server is
# started, it logs a message to stdout telling you the autodetected path to your
# webRoot.  If this path is not your actual webRoot, then you'll want to override
# this config parameter here.
#
# Valid values: 
#
# 1. Absolute path to the webRoot directory
#
# 2. Special token:  __AUTODETECT__
#    When this token is used, SmartClient attempts to auto-detect the webRoot using
#    standard servlet APIs.  This may or may not work - depending on your
#    container type and deployment type.  For example, WAR/EAR deployments
#    on some containers never make it to disk, and so the container refuses
#    to provide the webRoot path.
#  
#    If SmartClient cannnot detect the webRoot, it sets the webRoot to
#    __USE_CONTAINER__ (see below).
#
# 3.  Special token: __USE_CONTAINER__
#     When this token is used, SmartClient uses standard servet APIs for accessing
#     filesystem resources.  This is slower than direct file access and, since
#     the servlet APIs provide no mechanism for writing to disk, means that some
#     development tools like the FileAssembler will not work.
#
webRoot: __AUTODETECT__

# Set this to the GWT module name.
gwtModuleName: app

# if you've moved the isomorphic directory from its default location in webRoot,
# set the root-relative path to it here
#
# For example, if in your deployment the 'isomorphic' dir is in /foo/bar, then set
# then you'll need to set this to foo/bar/isomorphic
isomorphicPathRootRelative: $gwtModuleName/sc


# -------------- DATABASE SETTINGS --------------------

# The SmartClient SDK ships with example database configurations.  By default, the SDK uses a
# built-in version of HSQLDB (equivalent to SampleDB here), but you can specify a different 
# database to use if you like.  To view / copy one of these configurations, just drop 
# your JDBC driver on the classpath, launch the Admin Console, and use its Database Configuration
# tab.  Refer to the Tools Deployment and Admin Console documentation topics for further discussion:
#
# https://www.smartclient.com/smartgwt/javadoc/com/smartgwt/client/docs/ToolsDeployment.html
# https://www.smartclient.com/smartgwt/javadoc/com/smartgwt/client/docs/AdminConsole.html

sql.defaultDatabase: mpmdb

sql.mpmdb.database.type: mysql
sql.mpmdb.interface.type: driverManager
sql.mpmdb.driver: com.mysql.jdbc.Driver
sql.mpmdb.driver.url: jdbc:mysql://localhost:3306/photohome?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&user=root&password=faintyou

# sql.ClassicModels.database.type: hsqldb
# sql.ClassicModels.interface.type: jndi
# sql.ClassicModels.driver.name: jdbc/classicmodels

# Configure your database connection via JNDI, as above, or you can easily configure it inline as below
# sql.SampleDB.database.type: hsqldb
# sql.SampleDB.interface.type: driverManager
# sql.SampleDB.driver: org.hsqldb.jdbcDriver
# sql.SampleDB.driver.url: jdbc:hsqldb:hsql://localhost/isomorphic 

sql.ClassicModels.database.type: hsqldb
sql.ClassicModels.interface.type: driverManager
sql.ClassicModels.driver: org.hsqldb.jdbcDriver
sql.ClassicModels.driver.url: jdbc:hsqldb:hsql://localhost/classicmodels

# Note that SmartGWT can publish JDBC endpoints via JNDI at the specified path for use by other
# frameworks such as Spring, but you may not use the java:comp or java:comp/env prefix because 
# that subtree is read-only on Tomcat (and possibly other containers) due to 
# security considerations.  If the subtree is unimportant to your use case, you may find that 
# combining the above driverManager config with something like the following is slightly easier to 
# manage (note that you will need the isomorphic sql module on your classpath):
#
# sql.jndi.publish: true
# sql.SampleDB.database.type: hsqldb
# sql.SampleDB.interface.type: driverManager
# sql.SampleDB.driver: org.hsqldb.jdbcDriver
# sql.SampleDB.driver.url: jdbc:hsqldb:hsql://localhost/isomorphic
# sql.SampleDB.jndi.publish.path: isomorphic/jdbc/samples 
sql.jndi.publish: false

# -------------- LOADING APP AND DATASOURCE DEFINITIONS --------------------

# Where the system looks for DataSource definition files ([dataSourceId].ds.xml or
# [dataSourceID].ds.js).  It's useful to put all your DataSources in one 
# directory since DataSources are frequently shared between applications.  
# "project.datasources" is also where the DataSource Importer tool looks 
# for available DataSources.

project.datasources: $webRoot/WEB-INF/ds,$webRoot/WEB-INF/ds/isomorphic,$webRoot/WEB-INF/ds/classic-models,$webRoot/WEB-INF/ds/mock
project.project: $webRoot/WEB-INF/ui
project.ui: $webRoot/WEB-INF/ui
# project.apps: $webRoot/shared/app

# -------------- Other settings --------------------
# The setting RPCManager.enabledBuiltinMethods enables or disables the BuiltInRPCs - RPC calls
# that are built into the SmartClient Server.  The setting below reflects the framework default
# of enabling only those RPCs that are typically needed in an application.
# 
# See the JavaDoc for com.isomorphic.rpc.BuiltinRPC and com.isomorphic.tools.BuiltinRPC for all
# available builtinRPCs and their behavior.
# 
# To enable all RPCs, you can just comment out the RPCManager.enabledBuiltinMethods entry
# below.  Note, however, that many of the BuiltinRPCs are designed for use by tools such as 
# Visual Builder, and provide services such as direct access to the file system (for load and 
# save of screens) that would be unsafe to expose to untrusted users.
# 
RPCManager.enabledBuiltinMethods: xmlToJS, uploadProgressCheck, exportClientData, downloadClientContent, downloadClientExport, setAttributes, areServerTimingsTracked, getAvailableScriptEngines, trackServerTimings

# Note: modulesDir is only used with the loadISC and loadModules JSP tags; if
# you intend to use those tags, do not change this setting
modulesDir: modules/